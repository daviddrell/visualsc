// This header file was generated using VisualSC's Export Code Function

// Visual Statechart is an open source project. Visit us at https://github.com/daviddrell/visualsc
#ifndef TESTMANAGERSTATEMACHINE_H
#define TESTMANAGERSTATEMACHINE_H

#include <QObject>
#include <QStateMachine>
#include <QFinalState>

class TestManagerStateMachine : public QObject
{
    Q_OBJECT

    //////////////////
    //
    //    Public interface
    //
    //    Connect to public slots to drive events into
    //    the state machine
    //
    //    Connect to the public signals to do work
    //    and monitor state changes
    //
    //////////////////

public:
    TestManagerStateMachine(QObject*parent=NULL);
    ~TestManagerStateMachine();

    //
    //    INPUT EVENT SLOTS
    //
    //    Call these slots to signal event inputs to the machine
    //


public slots:
    //////// State Machine: _testManagerStateMachine ////////
    void Event_startMachine___testManagerStateMachine();
    void Event___start();
    void Event___downloadFailed();
    void Event___sHA1IsSame();
    void Event___sHA1IsDifferent();
    void Event___testsCompleted();
    void Event___pollTimerPopped();
    void Event___updateFailure();
    void Event___updateFirmwareAllUnitsFinished();

    //////// State Machine: _updateFirmwareAllUnits ////////

    //////// State Machine: _updatingGSUnits ////////
    void Event___gSUpdateSuccess();

    //////// State Machine: _updatingWincomm ////////
    void Event___upzipSuccess();


signals:
    //
    //    OUTPUT ACTION SIGNALS
    //
    //    Connect to these signals to a slot corresponding to a entryAction or exitAction
    //
    //////// State Machine: _testManagerStateMachine ////////
    void Action___startDownload();
    void Action___startTests();

    //////// State Machine: _updateFirmwareAllUnits ////////

    //////// State Machine: _updatingGSUnits ////////
    void Action___startGSUpdate();

    //////// State Machine: _updatingWincomm ////////
    void Action___startUnzip();


    //
    //    STATE CHANGE MONITOR SIGNALS
    //
    //    Connect to these signals to monitor state transitions
    //
    //////// State Machine: _testManagerStateMachine ////////
    void Signal_StateReady___testManagerStateMachine();
    void Signal_StateEntry___idle();
    void Signal_StateExit___idle();
    void Signal_StateEntry___downloadingAVC();
    void Signal_StateExit___downloadingAVC();
    void Signal_StateEntry___runningTests();
    void Signal_StateExit___runningTests();
    void Signal_StateEntry___completed();
    void Signal_StateExit___completed();
    void Signal_StateEntry___updateFirmwareAllUnits();
    void Signal_StateExit___updateFirmwareAllUnits();

    //////// State Machine: _updateFirmwareAllUnits ////////
    void Signal_StateEntry___updatingGSUnits();
    void Signal_StateExit___updatingGSUnits();
    void Signal_StateEntry___updatingWincomm();
    void Signal_StateExit___updatingWincomm();

    //////// State Machine: _updatingGSUnits ////////
    void Signal_StateEntry___updateInProgress();
    void Signal_StateExit___updateInProgress();
    void Signal_StateEntry___done_updatingGSUnits();
    void Signal_StateExit___done_updatingGSUnits();

    //////// State Machine: _updatingWincomm ////////
    void Signal_StateEntry___unzipInProgress();
    void Signal_StateExit___unzipInProgress();
    void Signal_StateEntry___done_updatingWincomm();
    void Signal_StateExit___done_updatingWincomm();


    //////////////////
    //
    //    Private below here
    //
    //////////////////


    /*
     *  A consequence of OOB encapsulation is that this class does know about its users, and so cannot listen
     * to their signals. Therefore this class exposes public slots that users can call. These slots
     * are then translated into private signals that the private state machine can listen to.
     *
     * For outbound signals, I choose to keep the statemachine objects private so that means I need
     * to translate private state machine signals into public signals.
     *
     * This all leads to a lot of confusion and possible name collisions. Therefore its better for this
     * file to be autogenerated from the visual state chart editor.
     *
     */


private:


private slots:
    // The Entry/Exit Slots that belong to QStates
    //////// State Machine: _testManagerStateMachine ////////
    void Slot_StateEntry___idle();
    void Slot_StateExit___idle();
    void Slot_StateEntry___downloadingAVC();
    void Slot_StateExit___downloadingAVC();
    void Slot_StateEntry___runningTests();
    void Slot_StateExit___runningTests();
    void Slot_StateEntry___completed();
    void Slot_StateExit___completed();
    void Slot_StateEntry___updateFirmwareAllUnits();
    void Slot_StateExit___updateFirmwareAllUnits();

    //////// State Machine: _updateFirmwareAllUnits ////////
    void Slot_StateEntry___updatingGSUnits();
    void Slot_StateExit___updatingGSUnits();
    void Slot_StateEntry___updatingWincomm();
    void Slot_StateExit___updatingWincomm();

    //////// State Machine: _updatingGSUnits ////////
    void Slot_StateEntry___updateInProgress();
    void Slot_StateExit___updateInProgress();
    void Slot_StateEntry___done_updatingGSUnits();
    void Slot_StateExit___done_updatingGSUnits();

    //////// State Machine: _updatingWincomm ////////
    void Slot_StateEntry___unzipInProgress();
    void Slot_StateExit___unzipInProgress();
    void Slot_StateEntry___done_updatingWincomm();
    void Slot_StateExit___done_updatingWincomm();


signals:
    // A Transition/Event slot's corresponding signal emitted in the slot
    //////// State Machine: _testManagerStateMachine ////////
    void Relay_Event___start_idle();
    void Relay_Event___downloadFailed_downloadingAVC();
    void Relay_Event___sHA1IsSame_downloadingAVC();
    void Relay_Event___sHA1IsDifferent_downloadingAVC();
    void Relay_Event___testsCompleted_runningTests();
    void Relay_Event___pollTimerPopped_completed();
    void Relay_Event___updateFailure_updateFirmwareAllUnits();
    void Relay_Event___updateFirmwareAllUnitsFinished_updateFirmwareAllUnits();

    //////// State Machine: _updateFirmwareAllUnits ////////

    //////// State Machine: _updatingGSUnits ////////
    void Relay_Event___gSUpdateSuccess_updateInProgress();

    //////// State Machine: _updatingWincomm ////////
    void Relay_Event___upzipSuccess_unzipInProgress();


private:
    //////// State Machine: _testManagerStateMachine ////////
    QStateMachine*    _testManagerStateMachine;
    QState*    _idle;
    QState*    _downloadingAVC;    // incredibel sfajlsdfasdf
    QState*    _runningTests;
    QState*    _completed;
    QState*    _updateFirmwareAllUnits;

    //////// State Machine: _updateFirmwareAllUnits ////////
    // child QState declared elsewhere _updateFirmwareAllUnits
    QState*    _updatingGSUnits;
    QState*    _updatingWincomm;

    //////// State Machine: _updatingGSUnits ////////
    // child QState declared elsewhere _updatingGSUnits
    QState*    _updateInProgress;
    QFinalState*    _done_updatingGSUnits;    // wowwoowowo

    //////// State Machine: _updatingWincomm ////////
    // child QState declared elsewhere _updatingWincomm
    QState*    _unzipInProgress;
    QFinalState*    _done_updatingWincomm;


};

#endif // TESTMANAGERSTATEMACHINE_H
