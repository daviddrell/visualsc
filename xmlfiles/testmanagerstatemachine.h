// This header file was generated using VisualSC's Export Code Function

#ifndef TESTMANAGERSTATEMACHINE_H
#define TESTMANAGERSTATEMACHINE_H

#include <QObject>
#include <QStateMachine>
#include <QFinalState>

class TestManagerStateMachine : public QObject
{
    Q_OBJECT

    //////////////////
    //
    //    Public interface
    //
    //    Connect to public slots to drive events into
    //    the state machine
    //
    //    Connect to the public signals to do work
    //    and monitor state changes
    //
    //////////////////

public:
    TestManagerStateMachine(QObject*parent=NULL);
    ~TestManagerStateMachine();

    //
    //    INPUT EVENT SLOTS
    //
    //    Call these slots to signal event inputs to the machine
    //


public slots:
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    void Event_startMachine_testManagerStateMachine_d47570ed();
    void Event_start_faa33767();
    void Event_sHA1IsDifferent_21a6ba6b();
    void Event_downloadFailed_680d4ac1();
    void Event_sHA1IsSame_680d4ac1();
    void Event_unzipSuccess_7a81f0a9();
    void Event_unzipFail_680d4ac1();
    void Event_testsCompleted_680d4ac1();
    void Event_pollTimerPopped_faa33767();


signals:
    //
    //    OUTPUT ACTION SIGNALS
    //
    //    Connect to these signals to a slot corresponding to a entryAction or exitAction
    //
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    void EntryAction_startDownload();
    void EntryAction_startUnzip();
    void EntryAction_startTests();


    //
    //    STATE CHANGE MONITOR SIGNALS
    //
    //    Connect to these signals to monitor state transitions
    //
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    void Signal_StateReady_testManagerStateMachine_d47570ed();
    void Signal_StateEntry_idle_1aefb2b3();
    void Signal_StateExit_idle_1aefb2b3();
    void Signal_StateEntry_downloadingAVC_faa33767();
    void Signal_StateExit_downloadingAVC_faa33767();
    void Signal_StateEntry_unzipAVC_21a6ba6b();
    void Signal_StateExit_unzipAVC_21a6ba6b();
    void Signal_StateEntry_runningTests_7a81f0a9();
    void Signal_StateExit_runningTests_7a81f0a9();
    void Signal_StateEntry_completed_680d4ac1();
    void Signal_StateExit_completed_680d4ac1();


    //////////////////
    //
    //    Private below here
    //
    //////////////////


    /*
     *  A consequence of OOB encapsulation is that this class does know about its users, and so cannot listen
     * to their signals. Therefore this class exposes public slots that users can call. These slots
     * are then translated into private signals that the private state machine can listen to.
     *
     * For outbound signals, I choose to keep the statemachine objects private so that means I need
     * to translate private state machine signals into public signals.
     *
     * This all leads to a lot of confusion and possible name collisions. Therefore its better for this
     * file to be autogenerated from the visual state chart editor.
     *
     */


private:


private slots:
    // The Entry/Exit Slots that belong to QStates
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    void Slot_StateEntry_idle_1aefb2b3();
    void Slot_StateExit_idle_1aefb2b3();
    void Slot_StateEntry_downloadingAVC_faa33767();
    void Slot_StateExit_downloadingAVC_faa33767();
    void Slot_StateEntry_unzipAVC_21a6ba6b();
    void Slot_StateExit_unzipAVC_21a6ba6b();
    void Slot_StateEntry_runningTests_7a81f0a9();
    void Slot_StateExit_runningTests_7a81f0a9();
    void Slot_StateEntry_completed_680d4ac1();
    void Slot_StateExit_completed_680d4ac1();


signals:
    // A Transition/Event slot's corresponding signal emitted in the slot
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    void Relay_Event_start_faa33767();
    void Relay_Event_sHA1IsDifferent_21a6ba6b();
    void Relay_Event_downloadFailed_680d4ac1();
    void Relay_Event_sHA1IsSame_680d4ac1();
    void Relay_Event_unzipSuccess_7a81f0a9();
    void Relay_Event_unzipFail_680d4ac1();
    void Relay_Event_testsCompleted_680d4ac1();
    void Relay_Event_pollTimerPopped_faa33767();


private:
    //////// State Machine: _testManagerStateMachine_d47570ed ////////
    QStateMachine*    _testManagerStateMachine_d47570ed;
    QState*    _idle_1aefb2b3;
    QState*    _downloadingAVC_faa33767;
    QState*    _unzipAVC_21a6ba6b;
    QState*    _runningTests_7a81f0a9;
    QState*    _completed_680d4ac1;


};

#endif // TESTMANAGERSTATEMACHINE_H
