// This header file was generated using VisualSC's Export Code Function

// Visual Statechart is an open source project. Visit us at https://github.com/daviddrell/visualsc
#ifndef STATEMACHINE_H
#define STATEMACHINE_H

#include <QObject>
#include <QStateMachine>
#include <QFinalState>

class StateMachine : public QObject
{
    Q_OBJECT

    //////////////////
    //
    //    Public interface
    //
    //    Connect to public slots to drive events into
    //    the state machine
    //
    //    Connect to the public signals to do work
    //    and monitor state changes
    //
    //////////////////

public:
    StateMachine(QObject*parent=NULL);
    ~StateMachine();

    //
    //    INPUT EVENT SLOTS
    //
    //    Call these slots to signal event inputs to the machine
    //


public slots:
    //////// State Machine: _stateMachine ////////
    void Event_startMachine_stateMachine();
    void Event_event___a();
    void Event_sr___b();

    //////// State Machine: _a ////////
    void Event_xToY___x___a();

    //////// State Machine: _b ////////


signals:
    //
    //    OUTPUT ACTION SIGNALS
    //
    //    Connect to these signals to a slot corresponding to a entryAction or exitAction
    //
    //////// State Machine: _stateMachine ////////

    //////// State Machine: _a ////////

    //////// State Machine: _b ////////


    //
    //    STATE CHANGE MONITOR SIGNALS
    //
    //    Connect to these signals to monitor state transitions
    //
    //////// State Machine: _stateMachine ////////
    void Signal_StateReady_stateMachine();
    void Signal_StateEntry_a();
    void Signal_StateExit_a();
    void Signal_StateEntry_b();
    void Signal_StateExit_b();

    //////// State Machine: _a ////////
    void Signal_StateEntry_x___a();
    void Signal_StateExit_x___a();
    void Signal_StateEntry_y();
    void Signal_StateExit_y();

    //////// State Machine: _b ////////
    void Signal_StateEntry_x___b();
    void Signal_StateExit_x___b();


    //////////////////
    //
    //    Private below here
    //
    //////////////////


    /*
     *  A consequence of OOB encapsulation is that this class does know about its users, and so cannot listen
     * to their signals. Therefore this class exposes public slots that users can call. These slots
     * are then translated into private signals that the private state machine can listen to.
     *
     * For outbound signals, I choose to keep the statemachine objects private so that means I need
     * to translate private state machine signals into public signals.
     *
     * This all leads to a lot of confusion and possible name collisions. Therefore its better for this
     * file to be autogenerated from the visual state chart editor.
     *
     */


private:


private slots:
    // The Entry/Exit Slots that belong to QStates
    //////// State Machine: _stateMachine ////////
    void Slot_StateEntry_a();
    void Slot_StateExit_a();
    void Slot_StateEntry_b();
    void Slot_StateExit_b();

    //////// State Machine: _a ////////
    void Slot_StateEntry_x___a();
    void Slot_StateExit_x___a();
    void Slot_StateEntry_y();
    void Slot_StateExit_y();

    //////// State Machine: _b ////////
    void Slot_StateEntry_x___b();
    void Slot_StateExit_x___b();


signals:
    // A Transition/Event slot's corresponding signal emitted in the slot
    //////// State Machine: _stateMachine ////////
    void Relay_Event_event___a();
    void Relay_Event_sr___b();

    //////// State Machine: _a ////////
    void Relay_Event_xToY___x___a();

    //////// State Machine: _b ////////


private:
    //////// State Machine: _stateMachine ////////
    QStateMachine*    _stateMachine;
    QState*    _a;
    QState*    _b;

    //////// State Machine: _a ////////
    // child QState declared elsewhere _a
    QState*    _x___a;
    QFinalState*    _y;

    //////// State Machine: _b ////////
    // child QState declared elsewhere _b
    QState*    _x___b;


};

#endif // STATEMACHINE_H
