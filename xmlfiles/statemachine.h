// This header file was generated using VisualSC's Export Code Function

// Visual Statechart is an open source project. Visit us at https://github.com/daviddrell/visualsc
#ifndef STATEMACHINE_H
#define STATEMACHINE_H

#include <QObject>
#include <QStateMachine>
#include <QFinalState>

class StateMachine : public QObject
{
    Q_OBJECT

    //////////////////
    //
    //    Public interface
    //
    //    Connect to public slots to drive events into
    //    the state machine
    //
    //    Connect to the public signals to do work
    //    and monitor state changes
    //
    //////////////////

public:
    StateMachine(QObject*parent=NULL);
    ~StateMachine();

    //
    //    INPUT EVENT SLOTS
    //
    //    Call these slots to signal event inputs to the machine
    //


public slots:
    //////// State Machine: _stateMachine_dcf5b3ed ////////
    void Event_startMachine_stateMachine_dcf5b3ed();
    void Event_special_ad0fe279();

    //////// State Machine: _stateMachineA_2c066f77 ////////
    void Event_event_07d9c974();
    void Event_event_abbca67c();

    //////// State Machine: _stateMachineB_ad0fe279 ////////

    //////// State Machine: _x_d409769e ////////
    void Event_event_b6d62949();
    void Event_event_3e580603();

    //////// State Machine: _y_46a3e410 ////////
    void Event_event_de6acfb3();
    void Event_event_926f7882();


signals:
    //
    //    OUTPUT ACTION SIGNALS
    //
    //    Connect to these signals to a slot corresponding to a entryAction or exitAction
    //
    //////// State Machine: _stateMachine_dcf5b3ed ////////

    //////// State Machine: _stateMachineA_2c066f77 ////////
    void EntryAction_jump();
    void EntryAction_dance();
    void EntryAction_fly();

    //////// State Machine: _stateMachineB_ad0fe279 ////////
    void ExitAction_fall();
    void ExitAction_stop();
    void ExitAction_lay();

    //////// State Machine: _x_d409769e ////////

    //////// State Machine: _y_46a3e410 ////////


    //
    //    STATE CHANGE MONITOR SIGNALS
    //
    //    Connect to these signals to monitor state transitions
    //
    //////// State Machine: _stateMachine_dcf5b3ed ////////
    void Signal_StateReady_stateMachine_dcf5b3ed();
    void Signal_StateEntry_stateMachineA_2c066f77();
    void Signal_StateExit_stateMachineA_2c066f77();
    void Signal_StateEntry_stateMachineB_ad0fe279();
    void Signal_StateExit_stateMachineB_ad0fe279();

    //////// State Machine: _stateMachineA_2c066f77 ////////
    void Signal_StateReady_stateMachineA_2c066f77();
    void Signal_StateEntry_ax_0a93998e();
    void Signal_StateExit_ax_0a93998e();
    void Signal_StateEntry_ay_07d9c974();
    void Signal_StateExit_ay_07d9c974();
    void Signal_StateEntry_az_abbca67c();
    void Signal_StateExit_az_abbca67c();

    //////// State Machine: _stateMachineB_ad0fe279 ////////
    void Signal_StateReady_stateMachineB_ad0fe279();
    void Signal_StateEntry_x_d409769e();
    void Signal_StateExit_x_d409769e();
    void Signal_StateEntry_y_46a3e410();
    void Signal_StateExit_y_46a3e410();

    //////// State Machine: _x_d409769e ////////
    void Signal_StateReady_x_d409769e();
    void Signal_StateEntry_1_3e580603();
    void Signal_StateExit_1_3e580603();
    void Signal_StateEntry_2_b6d62949();
    void Signal_StateExit_2_b6d62949();

    //////// State Machine: _y_46a3e410 ////////
    void Signal_StateReady_y_46a3e410();
    void Signal_StateEntry_3_926f7882();
    void Signal_StateExit_3_926f7882();
    void Signal_StateEntry_4_de6acfb3();
    void Signal_StateExit_4_de6acfb3();


    //////////////////
    //
    //    Private below here
    //
    //////////////////


    /*
     *  A consequence of OOB encapsulation is that this class does know about its users, and so cannot listen
     * to their signals. Therefore this class exposes public slots that users can call. These slots
     * are then translated into private signals that the private state machine can listen to.
     *
     * For outbound signals, I choose to keep the statemachine objects private so that means I need
     * to translate private state machine signals into public signals.
     *
     * This all leads to a lot of confusion and possible name collisions. Therefore its better for this
     * file to be autogenerated from the visual state chart editor.
     *
     */


private:


private slots:
    // The Entry/Exit Slots that belong to QStates
    //////// State Machine: _stateMachine_dcf5b3ed ////////
    void Slot_StateEntry_stateMachineA_2c066f77();
    void Slot_StateExit_stateMachineA_2c066f77();
    void Slot_StateEntry_stateMachineB_ad0fe279();
    void Slot_StateExit_stateMachineB_ad0fe279();

    //////// State Machine: _stateMachineA_2c066f77 ////////
    void Slot_StateEntry_ax_0a93998e();
    void Slot_StateExit_ax_0a93998e();
    void Slot_StateEntry_ay_07d9c974();
    void Slot_StateExit_ay_07d9c974();
    void Slot_StateEntry_az_abbca67c();
    void Slot_StateExit_az_abbca67c();

    //////// State Machine: _stateMachineB_ad0fe279 ////////
    void Slot_StateEntry_x_d409769e();
    void Slot_StateExit_x_d409769e();
    void Slot_StateEntry_y_46a3e410();
    void Slot_StateExit_y_46a3e410();

    //////// State Machine: _x_d409769e ////////
    void Slot_StateEntry_1_3e580603();
    void Slot_StateExit_1_3e580603();
    void Slot_StateEntry_2_b6d62949();
    void Slot_StateExit_2_b6d62949();

    //////// State Machine: _y_46a3e410 ////////
    void Slot_StateEntry_3_926f7882();
    void Slot_StateExit_3_926f7882();
    void Slot_StateEntry_4_de6acfb3();
    void Slot_StateExit_4_de6acfb3();


signals:
    // A Transition/Event slot's corresponding signal emitted in the slot
    //////// State Machine: _stateMachine_dcf5b3ed ////////
    void Relay_Event_special_ad0fe279();

    //////// State Machine: _stateMachineA_2c066f77 ////////
    void Relay_Event_event_07d9c974();
    void Relay_Event_event_abbca67c();

    //////// State Machine: _stateMachineB_ad0fe279 ////////

    //////// State Machine: _x_d409769e ////////
    void Relay_Event_event_b6d62949();
    void Relay_Event_event_3e580603();

    //////// State Machine: _y_46a3e410 ////////
    void Relay_Event_event_de6acfb3();
    void Relay_Event_event_926f7882();


private:
    //////// State Machine: _stateMachine_dcf5b3ed ////////
    QStateMachine*    _stateMachine_dcf5b3ed;
    QState*    _stateMachineA_2c066f77;
    QState*    _stateMachineB_ad0fe279;

    //////// State Machine: _stateMachineA_2c066f77 ////////
    // child QState declared elsewhere _stateMachineA_2c066f77
    QState*    _ax_0a93998e;
    QState*    _ay_07d9c974;
    QFinalState*    _az_abbca67c;

    //////// State Machine: _stateMachineB_ad0fe279 ////////
    // child QState declared elsewhere _stateMachineB_ad0fe279
    QState*    _x_d409769e;
    QState*    _y_46a3e410;

    //////// State Machine: _x_d409769e ////////
    // child QState declared elsewhere _x_d409769e
    QState*    _1_3e580603;
    QState*    _2_b6d62949;

    //////// State Machine: _y_46a3e410 ////////
    // child QState declared elsewhere _y_46a3e410
    QState*    _3_926f7882;
    QState*    _4_de6acfb3;


};

#endif // STATEMACHINE_H
