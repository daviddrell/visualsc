// This header file was generated using VisualSC's Export Code Function

// Visual Statechart is an open source project. Visit us at https://github.com/daviddrell/visualsc
#ifndef STATEMACHINE_H
#define STATEMACHINE_H

#include <QObject>
#include <QStateMachine>
#include <QFinalState>

class StateMachine : public QObject
{
    Q_OBJECT

    //////////////////
    //
    //    Public interface
    //
    //    Connect to public slots to drive events into
    //    the state machine
    //
    //    Connect to the public signals to do work
    //    and monitor state changes
    //
    //////////////////

public:
    StateMachine(QObject*parent=NULL);
    ~StateMachine();

    //
    //    INPUT EVENT SLOTS
    //
    //    Call these slots to signal event inputs to the machine
    //


public slots:
    //////// State Machine: _stateMachine ////////
    void Event_startMachine___stateMachine();
    void Event___systemReady_waitingForSystemReady();
    void Event___loopCountExceeded_running();
    void Event___equipmentFailed_running();

    //////// State Machine: _running ////////
    void Event___connected_connecting();
    void Event___dialFailed_connecting();
    void Event___disconnected_connected();
    void Event___disconnectFailed_connected();


signals:
    //
    //    OUTPUT ACTION SIGNALS
    //
    //    Connect to these signals to a slot corresponding to a entryAction or exitAction
    //
    //////// State Machine: _stateMachine ////////

    //////// State Machine: _running ////////
    void EntryAction___dial();
    void ExitAction___incrementloopcounter();
    void EntryAction___hangup();


    //
    //    STATE CHANGE MONITOR SIGNALS
    //
    //    Connect to these signals to monitor state transitions
    //
    //////// State Machine: _stateMachine ////////
    void Signal_StateReady___stateMachine();
    void Signal_StateEntry___waitingForSystemReady();
    void Signal_StateExit___waitingForSystemReady();
    void Signal_StateEntry___running();
    void Signal_StateExit___running();
    void Signal_StateEntry___success();
    void Signal_StateExit___success();
    void Signal_StateEntry___failed();
    void Signal_StateExit___failed();

    //////// State Machine: _running ////////
    void Signal_StateEntry___connecting();
    void Signal_StateExit___connecting();
    void Signal_StateEntry___connected();
    void Signal_StateExit___connected();


    //////////////////
    //
    //    Private below here
    //
    //////////////////


    /*
     *  A consequence of OOB encapsulation is that this class does know about its users, and so cannot listen
     * to their signals. Therefore this class exposes public slots that users can call. These slots
     * are then translated into private signals that the private state machine can listen to.
     *
     * For outbound signals, I choose to keep the statemachine objects private so that means I need
     * to translate private state machine signals into public signals.
     *
     * This all leads to a lot of confusion and possible name collisions. Therefore its better for this
     * file to be autogenerated from the visual state chart editor.
     *
     */


private:


private slots:
    // The Entry/Exit Slots that belong to QStates
    //////// State Machine: _stateMachine ////////
    void Slot_StateEntry___waitingForSystemReady();
    void Slot_StateExit___waitingForSystemReady();
    void Slot_StateEntry___running();
    void Slot_StateExit___running();
    void Slot_StateEntry___success();
    void Slot_StateExit___success();
    void Slot_StateEntry___failed();
    void Slot_StateExit___failed();

    //////// State Machine: _running ////////
    void Slot_StateEntry___connecting();
    void Slot_StateExit___connecting();
    void Slot_StateEntry___connected();
    void Slot_StateExit___connected();


signals:
    // A Transition/Event slot's corresponding signal emitted in the slot
    //////// State Machine: _stateMachine ////////
    void Relay_Event___systemReady_waitingForSystemReady();
    void Relay_Event___loopCountExceeded_running();
    void Relay_Event___equipmentFailed_running();

    //////// State Machine: _running ////////
    void Relay_Event___connected_connecting();
    void Relay_Event___dialFailed_connecting();
    void Relay_Event___disconnected_connected();
    void Relay_Event___disconnectFailed_connected();


private:
    //////// State Machine: _stateMachine ////////
    QStateMachine*    _stateMachine;
    QState*    _waitingForSystemReady;
    QState*    _running;
    QFinalState*    _success;
    QFinalState*    _failed;

    //////// State Machine: _running ////////
    // child QState declared elsewhere _running
    QState*    _connecting;
    QState*    _connected;


};

#endif // STATEMACHINE_H
